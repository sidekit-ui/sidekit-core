!function(t,e){"object"==typeof exports&&exports&&"string"!=typeof exports.nodeName?e(exports):"function"==typeof define&&define.amd?define(["exports"],e):(t.Mustache={},e(t.Mustache))}(this,function(t){function e(t){return"function"==typeof t}function n(t){return g(t)?"array":typeof t}function r(t){return t.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g,"\\$&")}function i(t,e){return null!=t&&"object"==typeof t&&e in t}function o(t,e){return v.call(t,e)}function s(t){return!o(w,t)}function a(t){return String(t).replace(/[&<>"'`=\/]/g,function(t){return y[t]})}function u(e,n){function i(){if(w&&!y)for(;v.length;)delete d[v.pop()];else v=[];w=!1,y=!1}function o(t){if("string"==typeof t&&(t=t.split(S,2)),!g(t)||2!==t.length)throw new Error("Invalid tags: "+t);a=new RegExp(r(t[0])+"\\s*"),u=new RegExp("\\s*"+r(t[1])),l=new RegExp("\\s*"+r("}"+t[1]))}if(!e)return[];var a,u,l,p=[],d=[],v=[],w=!1,y=!1;o(n||t.tags);for(var E,T,K,j,P,U,A=new f(e);!A.eos();){if(E=A.pos,K=A.scanUntil(a))for(var C=0,V=K.length;C<V;++C)j=K.charAt(C),s(j)?v.push(d.length):y=!0,d.push(["text",j,E,E+1]),E+=1,"\n"===j&&i();if(!A.scan(a))break;if(w=!0,T=A.scan(b)||"name",A.scan(m),"="===T?(K=A.scanUntil(k),A.scan(k),A.scanUntil(u)):"{"===T?(K=A.scanUntil(l),A.scan(x),A.scanUntil(u),T="&"):K=A.scanUntil(u),!A.scan(u))throw new Error("Unclosed tag at "+A.pos);if(P=[T,K,E,A.pos],d.push(P),"#"===T||"^"===T)p.push(P);else if("/"===T){if(U=p.pop(),!U)throw new Error('Unopened section "'+K+'" at '+E);if(U[1]!==K)throw new Error('Unclosed section "'+U[1]+'" at '+E)}else"name"===T||"{"===T||"&"===T?y=!0:"="===T&&o(K)}if(U=p.pop())throw new Error('Unclosed section "'+U[1]+'" at '+A.pos);return h(c(d))}function c(t){for(var e,n,r=[],i=0,o=t.length;i<o;++i)e=t[i],e&&("text"===e[0]&&n&&"text"===n[0]?(n[1]+=e[1],n[3]=e[3]):(r.push(e),n=e));return r}function h(t){for(var e,n,r=[],i=r,o=[],s=0,a=t.length;s<a;++s)switch(e=t[s],e[0]){case"#":case"^":i.push(e),o.push(e),i=e[4]=[];break;case"/":n=o.pop(),n[5]=e[2],i=o.length>0?o[o.length-1][4]:r;break;default:i.push(e)}return r}function f(t){this.string=t,this.tail=t,this.pos=0}function l(t,e){this.view=t,this.cache={".":this.view},this.parent=e}function p(){this.cache={}}var d=Object.prototype.toString,g=Array.isArray||function(t){return"[object Array]"===d.call(t)},v=RegExp.prototype.test,w=/\S/,y={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;","/":"&#x2F;","`":"&#x60;","=":"&#x3D;"},m=/\s*/,S=/\s+/,k=/\s*=/,x=/\s*\}/,b=/#|\^|\/|>|\{|&|=|!/;f.prototype.eos=function(){return""===this.tail},f.prototype.scan=function(t){var e=this.tail.match(t);if(!e||0!==e.index)return"";var n=e[0];return this.tail=this.tail.substring(n.length),this.pos+=n.length,n},f.prototype.scanUntil=function(t){var e,n=this.tail.search(t);switch(n){case-1:e=this.tail,this.tail="";break;case 0:e="";break;default:e=this.tail.substring(0,n),this.tail=this.tail.substring(n)}return this.pos+=e.length,e},l.prototype.push=function(t){return new l(t,this)},l.prototype.lookup=function(t){var n,r=this.cache;if(r.hasOwnProperty(t))n=r[t];else{for(var o,s,a=this,u=!1;a;){if(t.indexOf(".")>0)for(n=a.view,o=t.split("."),s=0;null!=n&&s<o.length;)s===o.length-1&&(u=i(n,o[s])),n=n[o[s++]];else n=a.view[t],u=i(a.view,t);if(u)break;a=a.parent}r[t]=n}return e(n)&&(n=n.call(this.view)),n},p.prototype.clearCache=function(){this.cache={}},p.prototype.parse=function(t,e){var n=this.cache,r=n[t];return null==r&&(r=n[t]=u(t,e)),r},p.prototype.render=function(t,e,n){var r=this.parse(t),i=e instanceof l?e:new l(e);return this.renderTokens(r,i,n,t)},p.prototype.renderTokens=function(t,e,n,r){for(var i,o,s,a="",u=0,c=t.length;u<c;++u)s=void 0,i=t[u],o=i[0],"#"===o?s=this.renderSection(i,e,n,r):"^"===o?s=this.renderInverted(i,e,n,r):">"===o?s=this.renderPartial(i,e,n,r):"&"===o?s=this.unescapedValue(i,e):"name"===o?s=this.escapedValue(i,e):"text"===o&&(s=this.rawValue(i)),void 0!==s&&(a+=s);return a},p.prototype.renderSection=function(t,n,r,i){function o(t){return s.render(t,n,r)}var s=this,a="",u=n.lookup(t[1]);if(u){if(g(u))for(var c=0,h=u.length;c<h;++c)a+=this.renderTokens(t[4],n.push(u[c]),r,i);else if("object"==typeof u||"string"==typeof u||"number"==typeof u)a+=this.renderTokens(t[4],n.push(u),r,i);else if(e(u)){if("string"!=typeof i)throw new Error("Cannot use higher-order sections without the original template");u=u.call(n.view,i.slice(t[3],t[5]),o),null!=u&&(a+=u)}else a+=this.renderTokens(t[4],n,r,i);return a}},p.prototype.renderInverted=function(t,e,n,r){var i=e.lookup(t[1]);if(!i||g(i)&&0===i.length)return this.renderTokens(t[4],e,n,r)},p.prototype.renderPartial=function(t,n,r){if(r){var i=e(r)?r(t[1]):r[t[1]];return null!=i?this.renderTokens(this.parse(i),n,r,i):void 0}},p.prototype.unescapedValue=function(t,e){var n=e.lookup(t[1]);if(null!=n)return n},p.prototype.escapedValue=function(e,n){var r=n.lookup(e[1]);if(null!=r)return t.escape(r)},p.prototype.rawValue=function(t){return t[1]},t.name="mustache.js",t.version="2.2.1",t.tags=["{{","}}"];var E=new p;t.clearCache=function(){return E.clearCache()},t.parse=function(t,e){return E.parse(t,e)},t.render=function(t,e,r){if("string"!=typeof t)throw new TypeError('Invalid template! Template should be a "string" but "'+n(t)+'" was given as the first argument for mustache#render(template, view, partials)');return E.render(t,e,r)},t.to_html=function(n,r,i,o){var s=t.render(n,r,i);return e(o)?void o(s):s},t.escape=a,t.Scanner=f,t.Context=l,t.Writer=p}),function(t,e){function n(){e.expr[":"].hasAttr=e.expr.createPseudo(function(t){var e=new RegExp(t);return function(t){for(var n=t.attributes,r=0;r<n.length;r++)if(e.test(n[r].nodeName))return!0;return!1}})}function r(){e("*:hasAttr(^data-sidekit-.+$)").each(function(){i(this)})}function i(t){for(var n,r,i,s="data-sidekit-",a=0,u=t.attributes.length;a<u;a++)if(n=t.attributes[a],r=n.name.toLowerCase(),0===r.indexOf(s)){if(!window[n.value])throw"Something strange has happened. Widget '"+n.name+"' data not found!";i=r.replace(s,"").toLowerCase(),o.push({id:t.id,data:window[n.value],w:i}),e(t).removeAttr(r)}}var o=[];t.init=function(){n(),r(),this.factory.create(o),o=[]}}(window.SideKit=window.SideKit||{},jQuery);var SideKit=window.SideKit||{};SideKit.factory={},function(t,e){"use strict";function n(r,i){if(r<i.length){var o,s=i[r],a=s.w;t.hasOwnProperty(a)&&(o=t[a],e.when(o.init(s.data)).then(function(){o.run(s.id,s.data),n(++r,i)}))}else i=null}t.create=function(t){var e=0;n(e,t)}}(SideKit.factory,jQuery);var SideKit=window.SideKit||{};SideKit.widget={},function(t,e,n,r){"use strict";t.env="DEV",t.assetsPath=null,t.getStyleSheet=function(t){$d=e.Deferred();var n=document.createElement("link");return n.type="text/css",n.rel="stylesheet",n.href=t,document.getElementsByTagName("head")[0].appendChild(n),$d.resolve(n),$d.promise()},t.getMainSideKitScriptTag=function(){if(document.currentScript)return document.currentScript.src;for(var e=document.getElementsByTagName("script"),n=0;n<e.length;n++)if(e[n].getAttribute("data-sidekit"))return t.env=e[n].src.match(/sidekit-core.min.js|sidekit-core.js/)?"PROD":"ENV",e[n];return null},t.getAssetsPath=function(){if(null===this.assetsPath){var t=this.getMainSideKitScriptTag();this.assetsPath=t.getAttribute("data-sidekit")}return this.assetsPath},t.render=function(t,e,i){var o="";if(e!==r&&e.length)try{o=n.to_html(e,i||{})}catch(t){o=t.toString()}t.html(o)}}(SideKit.widget,jQuery,Mustache);
//# sourceMappingURL=data:application/json;base64,
